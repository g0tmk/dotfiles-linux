#!/usr/bin/env bash

# Control volume of current pulseaudio sink
# TODO:
#   - do this in python
#   - immediately after boot, volume controls do not work (pulseaudio is not running
#     yet?) either way, volume controls output this:
#       +10:47% volume increase 5
#       No PulseAudio daemon running, or not running as session daemon.
#       No PulseAudio daemon running, or not running as session daemon.
#       No PulseAudio daemon running, or not running as session daemon.
#       No PulseAudio daemon running, or not running as session daemon.
#       No PulseAudio daemon running, or not running as session daemon.
#       You have to specify a sink name/index and a volume
#       No PulseAudio daemon running, or not running as session daemon.
#       No PulseAudio daemon running, or not running as session daemon.
#       No PulseAudio daemon running, or not running as session daemon.
#       No PulseAudio daemon running, or not running as session daemon.
#       Volume: %
#       +10:48% volume increase 5
#       Volume: 60%
#


#getdefaultsinkname() {
#    pacmd stat | awk -F": " '/^Default sink name: /{print $2}'
#}

getdefaultsinkvol() {
    amixer sget Master | egrep -o "Front Left.+[0-9]+%" | egrep -o "[0-9]+%" | egrep -o "[0-9]+"
    #pacmd list-sinks |
    #    awk '/^\s+name: /{indefault = $2 == "<'$(getdefaultsinkname)'>"}
    #        /^\s+volume: / && indefault {print $5; exit}' |
    #    awk -F"%" '{print $1}'
}

setdefaulsinkvol() {
    if ! [[ $1 =~ ^[-0-9]+$ ]]; then
        echo "Volume must be a number"
        exit 1
    fi
    
    if [[ $1 -gt 130 ]]; then
        NEW_VOL=130
    elif [[ $1 -lt 0 ]]; then
        NEW_VOL=0
    else
        NEW_VOL=$1
    fi

    amixer -q sset Master "$NEW_VOL%"
    #pactl set-sink-volume $(getdefaultsinkname) $NEW_VOL%
}

toggledefaultsink() {
    amixer -q sset Master toggle
    #pactl set-sink-mute $(getdefaultsinkname) toggle
}

isdefaultsinkmuted() {
    amixer sget Master | egrep -o "Front Left.+\[(on|off)\]" | egrep -o "\[(on|off)\]" | grep off > /dev/null
    #pacmd list-sinks |
    #    awk '/^\s+name: /{indefault = $2 == "<'$(getdefaultsinkname)'>"}
    #        /^\s+muted: / && indefault {print $2; exit}' | grep yes > /dev/null
}

#### Parse parameters
if [ $# -eq 0 ]
then
    echo "Usage: $0 ( set | increase | decrease ) percent"
    echo "       $0 toggle"
    exit 1
fi

case "$1" in
    set)
        setdefaulsinkvol $2
        ;;
    increase)
        if isdefaultsinkmuted; then
            toggledefaultsink
        fi
        NEW_VOL=$(($(getdefaultsinkvol) + $2))
        setdefaulsinkvol $NEW_VOL
        ;;
    decrease)
        NEW_VOL=$(($(getdefaultsinkvol) - $2))
        setdefaulsinkvol $NEW_VOL
        ;;
    toggle)
        toggledefaultsink
        ;;
    *) echo "bad option $1"
        ;;
esac

if isdefaultsinkmuted; then
    echo "Muted"
else
    echo "Volume: $(getdefaultsinkvol)%"
fi


