-- from http://beginners-guide-to-xmonad.readthedocs.io/configure_xmonadhs.html

import XMonad
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Util.Run(spawnPipe)
import XMonad.Util.EZConfig(additionalKeys)
import System.IO
--noBorders for fullscreen windows (see https://bbs.archlinux.org/viewtopic.php?id=191565)
import XMonad.Layout.ToggleLayouts
import XMonad.Layout.NoBorders   ( noBorders, smartBorders)
-- "killAllOtherCopies" and "windows copyToAll"
import XMonad.Actions.CopyWindow

-- import colorscheme (~/.xmonad/lib/colors.hs) generated by wal
-- TODO: fix this; apparently `xmonad --rebuild` isn't looking in lib/?
--import Colors

userDir = "/home/g0tmk/"
bitmapDir = userDir ++ ".xmonad/xbm/"


--autoStart = userDir ++ ".xmonad/bin/autostart.sh"


-- The main function.
main = xmonad =<< statusBar myBar myPP toggleStrutsKey myConfig

-- Command to launch the bar. Can switch to plain xmobar if you have issues with pystatusbar
--myBar = "xmobar"
myBar = "PYTHONPATH=/home/$USER/repos python3 -m pystatusbar -c /home/$USER/repos/pystatusbar/config_bxpsd.config 2> /tmp/pystatusbar_stderr 1> /tmp/pystatusbar_stdout"

-- Custom PP, configure it as you like. It determines what is being written to the bar.
myPP = xmobarPP { ppCurrent = xmobarColor "#ee9a00" ""
                , ppTitle = xmobarColor "#8bc34a" "" . shorten 70
                , ppUrgent = xmobarColor "#ff1111" ""
                , ppSep = "   "
                }

-- Key binding to toggle the gap for the bar.
toggleStrutsKey XConfig {XMonad.modMask = modMask} = (modMask, xK_b)

-- Main configuration, override the defaults to your liking.
myConfig = def
        { manageHook = manageHook defaultConfig <+> manageDocks 
        , layoutHook    = avoidStruts  
                        $ toggleLayouts (noBorders Full)
                        $ smartBorders
                        $ layoutHook defaultConfig
          , logHook = return ()
--        , logHook = dynamicLogWithPP xmobarPP
--                        { ppOutput = hPutStrLn xmproc
--                        , ppTitle = xmobarColor "#8bc34a" "" . shorten 70
--                        , ppCurrent = xmobarColor "#ee9a00" ""
--                        , ppSep = "   "
--                        }
        , workspaces = myWorkspaces
        , modMask = mod4Mask     -- Rebind Mod to the Windows key
        ---, normalBorderColor = "#444444"
        , normalBorderColor = "#222222"
        -- , focusedBorderColor = "#0000dd"
        -- , focusedBorderColor = "#22bb99"
        , focusedBorderColor = "#4887aa"
        , borderWidth = 1
        } `additionalKeys` myKeys
    where 
        myKeys = 
                 [ 
                 -- Mod+Shift+Z: Lock screen with slock
                 -- turn off screen and lock it. brightness adjustments are not necessary but it prevents potentially blinding screens on unlock
                   ((mod4Mask .|. shiftMask, xK_z), spawn "brightnessctl --save set 1; sleep 0.1; xset dpms force off; slock; brightnessctl --restore; sleep 0.1")
                 -- Ctrl+Mod+Shift+Z: Suspend to RAM
                 , ((mod4Mask .|. shiftMask .|. controlMask, xK_z), spawn "systemctl suspend")

                 -- screenshot (select area)
                 , ((controlMask, xK_Print), spawn "mkdir -p ~/screenshots; sleep 0.2; scrot -s --exec 'mv $f ~/screenshots' && echo 'Took screenshot!' | show_osd_message")
                 -- screenshot (fullscreen)
                 , ((0, xK_Print), spawn "mkdir -p ~/screenshots; scrot --exec 'mv $f ~/screenshots' && echo 'Took screenshot!' | show_osd_message")

                 -- Mod+b: toggle fullscreen
                 , ((mod4Mask, xK_b     ), sendMessage ToggleStruts)
                 -- Mod+p: app search + launcher
                 -- Note: for yeganesh, "$()" syntax will execute the output (yeganesh only outputs the binary's name)
                 -- , ((mod4Mask, xK_p), spawn "dmenu_run -fn 'Terminus::pixelsize=12:antialias=0'")
                 -- , ((mod4Mask, xK_p), spawn "$(~/bin/yeganesh -x -- -nb \"#000000\" -fn \"Terminus::pixelsize=12:antialias=0\")")
                 , ((mod4Mask, xK_p), spawn "rofi -modi combi,window -show combi -combi-modi run,drun -show-icons -markup")

                 -- Copy window to all workspaces
                 , ((mod4Mask, xK_v ), windows copyToAll) 
                 -- Un-copy window from all workspaces
                 , ((mod4Mask .|. shiftMask, xK_v ),  killAllOtherCopies) 

                 -- Multimedia keys
                 -- XF86MonBrightnessUp
                 -- NOTE: x220 seems to do this automatically so we need a way to disable it there; for now, I did not add brightness.py to the sudoers file... its a workaround but should be fixed asap
                 , ((0, 0x1008ff02), spawn "brightnessctl -n1 set +10% | grep 'Current brightness' | egrep -o '[0-9]+%' | show_osd_message")
                 -- XF86MonBrightnessDown
                 , ((0, 0x1008ff03), spawn "brightnessctl -n1 set 10%- | grep 'Current brightness' | egrep -o '[0-9]+%' | show_osd_message")
                 -- XF86AudioLowerVolume
                 , ((0, 0x1008ff11), spawn "~/bin/volume decrease 5 | show_osd_message")
                 -- XF86AudioRaiseVolume
                 , ((0, 0x1008ff13), spawn "~/bin/volume increase 5 | show_osd_message")
                 -- XF86AudioMute
                 , ((0, 0x1008ff12), spawn "~/bin/volume toggle | show_osd_message")
                 ]
        myWorkspaces = ["1:term","2:web","3","4","5","6","7","8","9:bg"]


